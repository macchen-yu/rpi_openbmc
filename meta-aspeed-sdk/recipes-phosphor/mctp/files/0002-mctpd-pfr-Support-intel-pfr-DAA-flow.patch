From 619289185943f7399465d7071d607d730c3f6f1e Mon Sep 17 00:00:00 2001
From: Steven Lee <steven_lee@aspeedtech.com>
Date: Tue, 13 Aug 2024 13:13:44 +0800
Subject: [PATCH] mctpd: pfr: Support intel pfr DAA flow

The patch supports following mctp request
- MCTP Control Message:
  - Discovery notify
- MCTP Vendor Message:
  - EID registration

Test step:
1. Enable PFR 5.0 features on AST1060
2. Add mctp-controller on i3c node in ast2600 device tree.
3. Run following commands to enable mctpi3c
    # Enable i3c0 mctp
    mctp address add 0x9d dev mctpi3c0
    mctp link set mctpi3c0 up

    # Enable i3c1 mctp
    mctp address add 0x1d dev mctpi3c1
    mctp link set mctpi3c1 up

4. Run following commands to setup endpoint
    # Send set EID to i3c0
    busctl call xyz.openbmc_project.MCTP \
    /xyz/openbmc_project/mctp au.com.CodeConstruct.MCTP SetupEndpoint \
    say "mctpi3c0" 6 0x07 0xec 0xa0 0x03 0x00 0x00

    # Send set EID to i3c1
    busctl call xyz.openbmc_project.MCTP \
    /xyz/openbmc_project/mctp au.com.CodeConstruct.MCTP SetupEndpoint \
    say "mctpi3c1" 6 0x07 0xec 0xa0 0x03 0x20 0x00

5. Message "PFR EID is registered by bus owner" should be shown on
   ast1060 console

Signed-off-by: Steven Lee <steven_lee@aspeedtech.com>
---
 src/mctp-control-spec.h      |   3 +
 src/mctp-vendor-intel-spec.h |  33 ++++++
 src/mctpd.c                  | 220 ++++++++++++++++++++++++++++++++++-
 3 files changed, 251 insertions(+), 5 deletions(-)
 create mode 100644 src/mctp-vendor-intel-spec.h

diff --git a/src/mctp-control-spec.h b/src/mctp-control-spec.h
index ea6eb4f..4bcf833 100644
--- a/src/mctp-control-spec.h
+++ b/src/mctp-control-spec.h
@@ -8,6 +8,9 @@
  * See DSP0236 v1.3.0 sec. 11 for reference.
  */
 
+#include <stdint.h>
+#include "mctp.h"
+
 struct mctp_ctrl_msg_hdr {
 	uint8_t rq_dgram_inst;
 	uint8_t command_code;
diff --git a/src/mctp-vendor-intel-spec.h b/src/mctp-vendor-intel-spec.h
new file mode 100644
index 0000000..934e488
--- /dev/null
+++ b/src/mctp-vendor-intel-spec.h
@@ -0,0 +1,33 @@
+/* SPDX-License-Identifier: Apache-2.0 OR GPL-2.0-or-later */
+
+/* Derived from libmctp's libmctp-cmds.h */
+#pragma once
+
+/*
+ * Helper structs and functions for MCTP control messages.
+ * See DSP0236 v1.3.0 sec. 11 for reference.
+ */
+
+#include <stdint.h>
+
+struct mctp_vendor_intel_msg_hdr {
+	uint16_t vendor_id;
+	uint8_t rq_dgram_inst;
+	uint8_t msg_op_code;
+} __attribute__((__packed__));
+
+struct mctp_vendor_intel_doe {
+	struct mctp_vendor_intel_msg_hdr vendor_hdr;
+	uint32_t seq_num;
+	uint8_t command_code;
+	uint8_t status;
+	uint8_t address;
+	uint8_t length;
+} __attribute__((__packed__));
+
+
+#define MCTP_SPDM_HDR_MSG_TYPE 0x05
+#define MCTP_VNDR_HDR_MSG_TYPE 0x7E
+
+#define MCTP_VNDR_CMD_EID_REGISTRATION 0x04
+
diff --git a/src/mctpd.c b/src/mctpd.c
index b89b01b..0b99a74 100644
--- a/src/mctpd.c
+++ b/src/mctpd.c
@@ -27,6 +27,7 @@
 #include "mctp-util.h"
 #include "mctp-netlink.h"
 #include "mctp-control-spec.h"
+#include "mctp-vendor-intel-spec.h"
 
 #define max(a, b) ((a) > (b) ? (a) : (b))
 #define min(a, b) ((a) < (b) ? (a) : (b))
@@ -452,6 +453,29 @@ out:
 	return rc;
 }
 
+/* Replies to a physical address */
+static int reply_message_phys(ctx *ctx, int sd, const void *resp, size_t resp_len,
+	const struct sockaddr_mctp_ext *addr)
+{
+	ssize_t len;
+	struct sockaddr_mctp_ext reply_addr;
+
+	memcpy(&reply_addr, &addr->smctp_base, sizeof(reply_addr));
+	reply_addr.smctp_base.smctp_tag &= ~MCTP_TAG_OWNER;
+
+	len = sendto(sd, resp, resp_len, 0,
+		(struct sockaddr*)addr, sizeof(*addr));
+	if (len < 0) {
+		return -errno;
+	}
+
+	if ((size_t)len != resp_len) {
+		warnx("BUG: short sendto %zd, expected %zu", len, resp_len);
+		return -EPROTO;
+	}
+	return 0;
+}
+
 /* Replies to a real EID, not physical addressing */
 static int reply_message(ctx *ctx, int sd, const void *resp, size_t resp_len,
 	const struct sockaddr_mctp_ext *addr)
@@ -604,7 +628,9 @@ static int handle_control_get_message_type_support(ctx *ctx,
 {
 	struct mctp_ctrl_cmd_get_msg_type_support *req = NULL;;
 	struct mctp_ctrl_resp_get_msg_type_support *resp = NULL;
-	uint8_t resp_buf[sizeof(*resp) + 1];
+	uint8_t resp_buf[sizeof(*resp) + MAX_ADDR_LEN];
+	size_t resp_len;
+	uint8_t *support_type_p;
 
 	if (buf_size < sizeof(*req)) {
 		warnx("short Get Message Type Support message");
@@ -616,11 +642,14 @@ static int handle_control_get_message_type_support(ctx *ctx,
 	resp->ctrl_hdr.command_code = req->ctrl_hdr.command_code;
 	resp->ctrl_hdr.rq_dgram_inst = RQDI_RESP;
 
-	// Only control messages supported
-	resp->msg_type_count = 1;
-	*((uint8_t*)(resp+1)) = MCTP_CTRL_HDR_MSG_TYPE;
+	resp->msg_type_count = 3;
+	resp_len = sizeof(*resp) + resp->msg_type_count;
+	support_type_p = (uint8_t *)resp + sizeof(*resp);
+	*((uint8_t*)(support_type_p++)) = MCTP_CTRL_HDR_MSG_TYPE;
+	*((uint8_t*)(support_type_p++)) = MCTP_SPDM_HDR_MSG_TYPE;
+	*((uint8_t*)(support_type_p)) = MCTP_VNDR_HDR_MSG_TYPE;
 
-	return reply_message(ctx, sd, resp, sizeof(*resp), addr);
+	return reply_message(ctx, sd, resp, resp_len, addr);
 }
 
 static int handle_control_resolve_endpoint_id(ctx *ctx,
@@ -663,6 +692,28 @@ static int handle_control_resolve_endpoint_id(ctx *ctx,
 	return reply_message(ctx, sd, resp, resp_len, addr);
 }
 
+static int handle_control_discovery_notify(ctx *ctx,
+	int sd, const struct sockaddr_mctp_ext *addr,
+	const uint8_t *buf, const size_t buf_size)
+{
+	struct mctp_ctrl_cmd_discovery_notify *req = NULL;
+	struct mctp_ctrl_resp_discovery_notify *resp = NULL;
+	uint8_t resp_buf[sizeof(*resp) + MAX_ADDR_LEN];
+
+	if (buf_size < sizeof(*req)) {
+		warnx("short Discovery Notify message");
+		return -ENOMSG;
+	}
+
+	req = (void*)buf;
+	resp = (void*)resp_buf;
+	memset(resp, 0x0, sizeof(*resp));
+	resp->ctrl_hdr.command_code = req->ctrl_hdr.command_code;
+	resp->ctrl_hdr.rq_dgram_inst = RQDI_RESP;
+
+	return reply_message_phys(ctx, sd, resp, sizeof(*resp), addr);
+}
+
 static int handle_control_unsupported(ctx *ctx,
 	int sd, const struct sockaddr_mctp_ext *addr,
 	const uint8_t *buf, const size_t buf_size)
@@ -743,6 +794,10 @@ static int cb_listen_control_msg(sd_event_source *s, int sd, uint32_t revents,
 			rc = handle_control_resolve_endpoint_id(ctx,
 				sd, &addr, buf, buf_size);
 			break;
+		case MCTP_CTRL_CMD_DISCOVERY_NOTIFY:
+			rc = handle_control_discovery_notify(ctx,
+				sd, &addr, buf, buf_size);
+			break;
 		default:
 			if (ctx->verbose) {
 				warnx("Ignoring unsupported command code 0x%02x",
@@ -901,6 +956,154 @@ static int listen_monitor(ctx *ctx)
 	return rc;
 }
 
+static int handle_vendor_intel_eid_registration(ctx *ctx,
+	int sd, const struct sockaddr_mctp_ext *addr,
+	const uint8_t *buf, const size_t buf_size)
+{
+	struct mctp_vendor_intel_doe *req = NULL;
+	struct mctp_vendor_intel_doe *resp = NULL;
+	uint8_t resp_buf[sizeof(*resp) + MAX_ADDR_LEN];
+	uint8_t *req_data_ptr;
+	uint8_t *res_data_ptr;
+	size_t resp_len;
+
+	if (buf_size > sizeof(resp_buf)) {
+		warnx("Wrong message format");
+		return -ENOMSG;
+	}
+	req = (void*)buf;
+	resp = (void*)resp_buf;
+	memset(resp, 0x0, sizeof(*resp));
+	resp->command_code = req->command_code;
+	resp->vendor_hdr.vendor_id = req->vendor_hdr.vendor_id;
+	resp->vendor_hdr.rq_dgram_inst = RQDI_RESP;
+	resp->vendor_hdr.msg_op_code = req->vendor_hdr.msg_op_code;
+	resp->length = req->length;
+	req_data_ptr = (uint8_t *)req + sizeof(struct mctp_vendor_intel_doe);
+	res_data_ptr = (uint8_t *)resp + sizeof(struct mctp_vendor_intel_doe);
+	memcpy(res_data_ptr, req_data_ptr, resp->length);
+	resp_len = sizeof(*resp) + resp->length;
+
+	return reply_message(ctx, sd, resp, resp_len, addr);
+}
+
+static int handle_vendor_intel_unsupported(ctx *ctx,
+	int sd, const struct sockaddr_mctp_ext *addr,
+	const uint8_t *buf, const size_t buf_size)
+{
+	struct mctp_vendor_intel_msg_hdr *req = NULL;
+	struct mctp_vendor_intel_doe respi = {0}, *resp = &respi;
+
+	if (buf_size < sizeof(*req)) {
+		warnx("short unsupported control message");
+		return -ENOMSG;
+	}
+
+	req = (void*)buf;
+	return reply_message(ctx, sd, resp, sizeof(*resp), addr);
+}
+
+static int cb_listen_intel_vendor_msg(sd_event_source *s, int sd, uint32_t revents,
+	void *userdata)
+{
+	struct sockaddr_mctp_ext addr = {0};
+	ctx *ctx = userdata;
+	uint8_t *buf = NULL;
+	size_t buf_size;
+	struct mctp_vendor_intel_doe *vi_msg = NULL;
+	int rc;
+
+	rc = read_message(ctx, sd, &buf, &buf_size, &addr);
+	if (rc < 0)
+		goto out;
+
+	if (addr.smctp_base.smctp_type != MCTP_VNDR_HDR_MSG_TYPE) {
+		warnx("BUG: Wrong message type for listen socket");
+		rc = -EINVAL;
+		goto out;
+	}
+
+	if (buf_size < sizeof(struct mctp_vendor_intel_msg_hdr)) {
+		warnx("Short message %zu bytes from %s",
+			buf_size, ext_addr_tostr(&addr));
+		rc = -EINVAL;
+		goto out;
+	}
+
+	vi_msg = (void*)buf;
+	if (ctx->verbose) {
+		warnx("Got Intel vendor request command code %hhd",
+			vi_msg->command_code);
+	}
+	switch (vi_msg->command_code) {
+		case MCTP_VNDR_CMD_EID_REGISTRATION:
+			rc = handle_vendor_intel_eid_registration(ctx,
+				sd, &addr, buf, buf_size);
+			break;
+		default:
+			if (ctx->verbose) {
+				warnx("Ignoring unsupported command code 0x%02x",
+					vi_msg->command_code);
+				rc = -ENOTSUP;
+			}
+			rc = handle_vendor_intel_unsupported(ctx,
+				sd, &addr, buf, buf_size);
+	}
+
+	if (ctx->verbose && rc < 0) {
+		warnx("Error handling command code %02x from %s: %s",
+			vi_msg->command_code, ext_addr_tostr(&addr),
+			strerror(-rc));
+	}
+
+out:
+	free(buf);
+	return 0;
+}
+
+static int listen_intel_vendor_msg(ctx *ctx, int net)
+{
+	struct sockaddr_mctp addr = { 0 };
+	int rc, sd = -1, val;
+
+	sd = socket(AF_MCTP, SOCK_DGRAM, 0);
+	if (sd < 0) {
+		rc = -errno;
+		warn("%s: socket() failed", __func__);
+		goto out;
+	}
+
+	addr.smctp_family = AF_MCTP;
+	addr.smctp_network = net;
+	addr.smctp_addr.s_addr = MCTP_ADDR_ANY;
+	addr.smctp_type = MCTP_VNDR_HDR_MSG_TYPE;
+	addr.smctp_tag = MCTP_TAG_OWNER;
+
+	rc = bind(sd, (struct sockaddr *)&addr, sizeof(addr));
+	if (rc < 0) {
+		rc = -errno;
+		warn("%s: bind() failed", __func__);
+		goto out;
+	}
+
+	val = 1;
+	rc = setsockopt(sd, SOL_MCTP, MCTP_OPT_ADDR_EXT, &val, sizeof(val));
+	if (rc < 0) {
+		rc = -errno;
+		warn("Kernel does not support MCTP extended addressing");
+		goto out;
+	}
+
+	rc = sd_event_add_io(ctx->event, NULL, sd, EPOLLIN,
+		cb_listen_intel_vendor_msg, ctx);
+	return rc;
+out:
+	if (rc < 0) {
+		close(sd);
+	}
+	return rc;
+}
+
 /* Use endpoint_query_peer() or endpoint_query_phys() instead.
  *
  * resp buffer is allocated, caller to free.
@@ -3200,6 +3403,13 @@ int main(int argc, char **argv)
 			return 1;
 	}
 
+	rc = listen_intel_vendor_msg(ctx, MCTP_NET_ANY);
+	if (rc < 0) {
+		warnx("Error in listen, returned %s %d", strerror(-rc), rc);
+		if (!ctx->testing)
+			return 1;
+	}
+
 	rc = setup_testing(ctx);
 	if (rc < 0)
 		return 1;
-- 
2.25.1

